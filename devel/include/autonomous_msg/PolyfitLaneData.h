// Generated by gencpp from file autonomous_msg/PolyfitLaneData.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_MSG_MESSAGE_POLYFITLANEDATA_H
#define AUTONOMOUS_MSG_MESSAGE_POLYFITLANEDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autonomous_msg
{
template <class ContainerAllocator>
struct PolyfitLaneData_
{
  typedef PolyfitLaneData_<ContainerAllocator> Type;

  PolyfitLaneData_()
    : frame_id()
    , id()
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)  {
    }
  PolyfitLaneData_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , id(_alloc)
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef double _a0_type;
  _a0_type a0;

   typedef double _a1_type;
  _a1_type a1;

   typedef double _a2_type;
  _a2_type a2;

   typedef double _a3_type;
  _a3_type a3;





  typedef boost::shared_ptr< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> const> ConstPtr;

}; // struct PolyfitLaneData_

typedef ::autonomous_msg::PolyfitLaneData_<std::allocator<void> > PolyfitLaneData;

typedef boost::shared_ptr< ::autonomous_msg::PolyfitLaneData > PolyfitLaneDataPtr;
typedef boost::shared_ptr< ::autonomous_msg::PolyfitLaneData const> PolyfitLaneDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator1> & lhs, const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.id == rhs.id &&
    lhs.a0 == rhs.a0 &&
    lhs.a1 == rhs.a1 &&
    lhs.a2 == rhs.a2 &&
    lhs.a3 == rhs.a3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator1> & lhs, const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8a9f56a6b73465e7e95b32b32224135";
  }

  static const char* value(const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8a9f56a6b73465eULL;
  static const uint64_t static_value2 = 0x7e95b32b32224135ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_msg/PolyfitLaneData";
  }

  static const char* value(const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"string id \n"
"float64 a0\n"
"float64 a1\n"
"float64 a2\n"
"float64 a3\n"
;
  }

  static const char* value(const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.id);
      stream.next(m.a0);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolyfitLaneData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_msg::PolyfitLaneData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_msg::PolyfitLaneData_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "a0: ";
    Printer<double>::stream(s, indent + "  ", v.a0);
    s << indent << "a1: ";
    Printer<double>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<double>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<double>::stream(s, indent + "  ", v.a3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_MSG_MESSAGE_POLYFITLANEDATA_H
