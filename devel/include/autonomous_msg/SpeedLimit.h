// Generated by gencpp from file autonomous_msg/SpeedLimit.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_MSG_MESSAGE_SPEEDLIMIT_H
#define AUTONOMOUS_MSG_MESSAGE_SPEEDLIMIT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autonomous_msg
{
template <class ContainerAllocator>
struct SpeedLimit_
{
  typedef SpeedLimit_<ContainerAllocator> Type;

  SpeedLimit_()
    : curr_limit(0.0)
    , next_limit(0.0)
    , dist_left(0.0)  {
    }
  SpeedLimit_(const ContainerAllocator& _alloc)
    : curr_limit(0.0)
    , next_limit(0.0)
    , dist_left(0.0)  {
  (void)_alloc;
    }



   typedef double _curr_limit_type;
  _curr_limit_type curr_limit;

   typedef double _next_limit_type;
  _next_limit_type next_limit;

   typedef double _dist_left_type;
  _dist_left_type dist_left;





  typedef boost::shared_ptr< ::autonomous_msg::SpeedLimit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_msg::SpeedLimit_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedLimit_

typedef ::autonomous_msg::SpeedLimit_<std::allocator<void> > SpeedLimit;

typedef boost::shared_ptr< ::autonomous_msg::SpeedLimit > SpeedLimitPtr;
typedef boost::shared_ptr< ::autonomous_msg::SpeedLimit const> SpeedLimitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_msg::SpeedLimit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_msg::SpeedLimit_<ContainerAllocator1> & lhs, const ::autonomous_msg::SpeedLimit_<ContainerAllocator2> & rhs)
{
  return lhs.curr_limit == rhs.curr_limit &&
    lhs.next_limit == rhs.next_limit &&
    lhs.dist_left == rhs.dist_left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_msg::SpeedLimit_<ContainerAllocator1> & lhs, const ::autonomous_msg::SpeedLimit_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_msg::SpeedLimit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_msg::SpeedLimit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_msg::SpeedLimit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6811f8ec87f49f482a9d61cafc2ca244";
  }

  static const char* value(const ::autonomous_msg::SpeedLimit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6811f8ec87f49f48ULL;
  static const uint64_t static_value2 = 0x2a9d61cafc2ca244ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_msg/SpeedLimit";
  }

  static const char* value(const ::autonomous_msg::SpeedLimit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 curr_limit\n"
"float64 next_limit\n"
"float64 dist_left\n"
;
  }

  static const char* value(const ::autonomous_msg::SpeedLimit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curr_limit);
      stream.next(m.next_limit);
      stream.next(m.dist_left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedLimit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_msg::SpeedLimit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_msg::SpeedLimit_<ContainerAllocator>& v)
  {
    s << indent << "curr_limit: ";
    Printer<double>::stream(s, indent + "  ", v.curr_limit);
    s << indent << "next_limit: ";
    Printer<double>::stream(s, indent + "  ", v.next_limit);
    s << indent << "dist_left: ";
    Printer<double>::stream(s, indent + "  ", v.dist_left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_MSG_MESSAGE_SPEEDLIMIT_H
